function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useState } from 'react';
import cls from 'classnames';
import plus from "../../assets/images/plus.svg";
import minus from "../../assets/images/minus.svg";
import "./index.less";
var Children = function Children(_ref) {
  var _ref$data = _ref.data,
    data = _ref$data === void 0 ? [] : _ref$data,
    selectedMenu = _ref.selectedMenu,
    onChange = _ref.onChange,
    _ref$icons = _ref.icons,
    icons = _ref$icons === void 0 ? [] : _ref$icons,
    _ref$iconClassName = _ref.iconClassName,
    iconClassName = _ref$iconClassName === void 0 ? '' : _ref$iconClassName,
    _ref$valueClassName = _ref.valueClassName,
    valueClassName = _ref$valueClassName === void 0 ? '' : _ref$valueClassName,
    _ref$dropdownClassNam = _ref.dropdownClassName,
    dropdownClassName = _ref$dropdownClassNam === void 0 ? '' : _ref$dropdownClassNam,
    selectedClassName = _ref.selectedClassName;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    parent = _useState2[0],
    setParent = _useState2[1];
  var handleParentClick = function handleParentClick(it) {
    if (it !== null && it !== void 0 && it.children) {
      setParent((parent === null || parent === void 0 ? void 0 : parent.value) === (it === null || it === void 0 ? void 0 : it.value) ? {} : it);
    } else {
      onChange(it);
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: cls('children', dropdownClassName)
  }, data === null || data === void 0 ? void 0 : data.map(function (it, index) {
    var _it$children;
    var isParentSelected = (parent === null || parent === void 0 ? void 0 : parent.value) === (it === null || it === void 0 ? void 0 : it.value);
    var isMenuSelected = (selectedMenu === null || selectedMenu === void 0 ? void 0 : selectedMenu.value) === (it === null || it === void 0 ? void 0 : it.value);
    var hasChildren = it === null || it === void 0 ? void 0 : (_it$children = it.children) === null || _it$children === void 0 ? void 0 : _it$children.length;
    return /*#__PURE__*/React.createElement("div", {
      key: "".concat(it === null || it === void 0 ? void 0 : it.value, "-").concat(index)
    }, /*#__PURE__*/React.createElement("div", {
      className: "child",
      onClick: function onClick() {
        return handleParentClick(it);
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: cls('icon', iconClassName)
    }, hasChildren && isParentSelected && /*#__PURE__*/React.createElement("img", {
      src: (icons === null || icons === void 0 ? void 0 : icons[0]) || minus,
      alt: ""
    }), hasChildren && !isParentSelected && /*#__PURE__*/React.createElement("img", {
      src: (icons === null || icons === void 0 ? void 0 : icons[1]) || plus,
      alt: ""
    })), /*#__PURE__*/React.createElement("div", {
      className: cls('text', (it === null || it === void 0 ? void 0 : it.className) || '', valueClassName, _defineProperty({}, selectedClassName || 'selected', isMenuSelected))
    }, it === null || it === void 0 ? void 0 : it.value)), hasChildren && isParentSelected && /*#__PURE__*/React.createElement(Children, {
      data: it === null || it === void 0 ? void 0 : it.children,
      onChange: onChange,
      icons: icons,
      selectedMenu: selectedMenu,
      iconClassName: iconClassName,
      valueClassName: valueClassName,
      selectedClassName: selectedClassName,
      dropdownClassName: dropdownClassName
    }));
  }));
};
var Tree = function Tree(_ref2) {
  var _ref2$data = _ref2.data,
    data = _ref2$data === void 0 ? [] : _ref2$data,
    icons = _ref2.icons,
    onSelect = _ref2.onSelect,
    _ref2$className = _ref2.className,
    className = _ref2$className === void 0 ? '' : _ref2$className,
    _ref2$iconClassName = _ref2.iconClassName,
    iconClassName = _ref2$iconClassName === void 0 ? '' : _ref2$iconClassName,
    _ref2$valueClassName = _ref2.valueClassName,
    valueClassName = _ref2$valueClassName === void 0 ? '' : _ref2$valueClassName,
    _ref2$dropdownClassNa = _ref2.dropdownClassName,
    dropdownClassName = _ref2$dropdownClassNa === void 0 ? '' : _ref2$dropdownClassNa,
    _ref2$selectedClassNa = _ref2.selectedClassName,
    selectedClassName = _ref2$selectedClassNa === void 0 ? '' : _ref2$selectedClassNa;
  var _useState3 = useState(),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedMenu = _useState4[0],
    setSelectedMenu = _useState4[1];
  var handleChange = function handleChange(v) {
    setSelectedMenu(v);
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(v);
  };
  return /*#__PURE__*/React.createElement("div", {
    role: "tree",
    className: cls('tree', className)
  }, /*#__PURE__*/React.createElement(Children, {
    data: data,
    icons: icons,
    selectedMenu: selectedMenu,
    dropdownClassName: dropdownClassName,
    iconClassName: iconClassName,
    valueClassName: valueClassName,
    selectedClassName: selectedClassName,
    onChange: handleChange
  }));
};
export default Tree;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
import "antd/es/select/style";
import _Select from "antd/es/select";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { Fragment, useEffect, useState } from 'react';
import { CronBuilder } from 'cron-builder-ts';
import { convertResult, dayOfTheMonthOption, dayOfTheWeekOption, defaultCron, hourOption, minuteOption, monthOption } from "../utils";
import "./index.less";
var cronExp = new CronBuilder();
var EVERY = ['*'];
var Option = _Select.Option;
export default function CustomCron(_ref) {
  var value = _ref.value,
    disabled = _ref.disabled,
    onChange = _ref.onChange;
  var _useState = useState({}),
    _useState2 = _slicedToArray(_useState, 2),
    expression = _useState2[0],
    setExpression = _useState2[1];
  // const [cronResult, setCronResult] = useState('');

  useEffect(function () {
    if (!value) return;
    var currentCron = value.split(' ');
    currentCron.shift();
    var _currentCron = _slicedToArray(currentCron, 5),
      minutes = _currentCron[0],
      hours = _currentCron[1],
      dayOfMonth = _currentCron[2],
      month1 = _currentCron[3],
      dayOfWeek = _currentCron[4];

    /* eslint-disable */
    function splitMultiple(value) {
      if (!value || value === '*' || value === '?') {
        return;
      }
      if (value.includes(',')) {
        return value.split(',');
      }
      return [value];
    }
    var expre = {
      minute: splitMultiple(minutes) || [],
      hour: splitMultiple(hours) || [],
      dayOfTheMonth: splitMultiple(dayOfMonth !== '0' ? dayOfMonth : '0'),
      dayOfTheWeek: splitMultiple(dayOfWeek) || [],
      month: splitMultiple(month1) || []
    };
    setExpression(expre);
    // setCronResult(convertCron(value));
  }, [value]);
  function handleChange(obj) {
    var tmp = _objectSpread(_objectSpread({}, expression), obj);
    setExpression(tmp);
    onChange(generateExpression(tmp));
  }
  function generateExpression(expression) {
    var _expression$minute = expression.minute,
      minute = _expression$minute === void 0 ? [] : _expression$minute,
      _expression$hour = expression.hour,
      hour = _expression$hour === void 0 ? [] : _expression$hour,
      _expression$dayOfTheM = expression.dayOfTheMonth,
      dayOfTheMonth = _expression$dayOfTheM === void 0 ? [] : _expression$dayOfTheM,
      _expression$month = expression.month,
      month = _expression$month === void 0 ? [] : _expression$month,
      _expression$dayOfTheW = expression.dayOfTheWeek,
      dayOfTheWeek = _expression$dayOfTheW === void 0 ? [] : _expression$dayOfTheW;
    var exp = cronExp.getAll();
    exp.minute = minute.length > 0 ? minute : EVERY;
    exp.hour = hour.length > 0 ? hour : EVERY;
    exp.dayOfTheMonth = dayOfTheMonth && dayOfTheMonth.length > 0 && dayOfTheMonth[0] !== '0' ? dayOfTheMonth : EVERY;
    exp.month = month.length > 0 ? month : EVERY;
    exp.dayOfTheWeek = dayOfTheWeek.length > 0 ? dayOfTheWeek : EVERY;
    cronExp.setAll(exp);
    var expressionResult = cronExp.build();
    var result = expressionResult === defaultCron ? '' : expressionResult;
    // setCronResult(result);

    return convertResult(result);
  }
  function renderSelect(label, placeholder, key, value) {
    var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
    return /*#__PURE__*/React.createElement("div", {
      className: "cron-box"
    }, /*#__PURE__*/React.createElement("div", {
      className: "cron-label"
    }, label, ":"), /*#__PURE__*/React.createElement("div", {
      className: "cron-select"
    }, /*#__PURE__*/React.createElement(_Select, {
      mode: "multiple",
      placeholder: placeholder,
      value: value,
      disabled: disabled,
      onChange: function onChange(val) {
        return handleChange(_defineProperty({}, key, val));
      },
      style: {
        minWidth: 200
      }
    }, data.map(function (item) {
      return /*#__PURE__*/React.createElement(Option, {
        key: item.key,
        value: item.key
      }, item.label);
    }))));
  }
  var minute = expression.minute,
    hour = expression.hour,
    dayOfTheMonth = expression.dayOfTheMonth,
    dayOfTheWeek = expression.dayOfTheWeek,
    month = expression.month;
  return /*#__PURE__*/React.createElement(Fragment, null, renderSelect('月份', '每月', 'month', month, monthOption), renderSelect('星期', '每周', 'dayOfTheWeek', dayOfTheWeek, dayOfTheWeekOption), renderSelect('日', '每天', 'dayOfTheMonth', dayOfTheMonth, dayOfTheMonthOption), renderSelect('小时', '每小时', 'hour', hour, hourOption), renderSelect('分钟', '每分钟', 'minute', minute, minuteOption))
  // <div>{cronResult}</div>
  ;
}
import "antd/es/button/style";
import _Button from "antd/es/button";
var _excluded = ["children", "url", "type", "icon", "disabled", "onClick", "style", "className", "size"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback } from 'react';
import { UploadOutlined } from '@ant-design/icons';
import useDownload from "./useDownload";
var ExportBtn = function ExportBtn(props) {
  var children = props.children,
    _props$url = props.url,
    url = _props$url === void 0 ? '/download' : _props$url,
    type = props.type,
    _props$icon = props.icon,
    icon = _props$icon === void 0 ? /*#__PURE__*/React.createElement(UploadOutlined, null) : _props$icon,
    disabled = props.disabled,
    onClick = props.onClick,
    style = props.style,
    className = props.className,
    size = props.size,
    options = _objectWithoutProperties(props, _excluded);
  var _useDownload = useDownload(url, options),
    loading = _useDownload.loading,
    download = _useDownload.download;
  var handleOnClick = useCallback(function (e) {
    download();
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  }, [download, onClick]);
  return /*#__PURE__*/React.createElement(_Button, {
    role: "export",
    size: size,
    type: type,
    loading: loading,
    onClick: handleOnClick,
    icon: icon,
    disabled: disabled,
    style: style,
    className: className
  }, children);
};
export default ExportBtn;
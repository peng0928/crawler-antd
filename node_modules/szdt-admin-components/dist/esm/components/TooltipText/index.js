import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useRef, useState } from 'react';
import cls from 'classnames';
import "./index.less";
var TooltipText = function TooltipText(_ref) {
  var _ref$current, _ref$current$parentNo, _ref$current2, _ref$current2$parentN, _ref$current3, _ref$current3$parentN, _ref$current3$parentN2, _ref$current4;
  var text = _ref.text,
    defaultTitle = _ref.title,
    overlayStyle = _ref.overlayStyle,
    textClassName = _ref.textClassName,
    _ref$rowNumber = _ref.rowNumber,
    rowNumber = _ref$rowNumber === void 0 ? 1 : _ref$rowNumber,
    _ref$betweenSpace = _ref.betweenSpace,
    betweenSpace = _ref$betweenSpace === void 0 ? 0 : _ref$betweenSpace;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  // 用来获取内容的宽度
  var ref = useRef();
  var title = /*#__PURE__*/React.createElement("div", null, text);
  var parentWidth = ref !== null && ref !== void 0 && (_ref$current = ref.current) !== null && _ref$current !== void 0 && (_ref$current$parentNo = _ref$current.parentNode) !== null && _ref$current$parentNo !== void 0 && _ref$current$parentNo.clientWidth ? ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : (_ref$current2$parentN = _ref$current2.parentNode) === null || _ref$current2$parentN === void 0 ? void 0 : _ref$current2$parentN.clientWidth : ref === null || ref === void 0 ? void 0 : (_ref$current3 = ref.current) === null || _ref$current3 === void 0 ? void 0 : (_ref$current3$parentN = _ref$current3.parentNode) === null || _ref$current3$parentN === void 0 ? void 0 : (_ref$current3$parentN2 = _ref$current3$parentN.parentNode) === null || _ref$current3$parentN2 === void 0 ? void 0 : _ref$current3$parentN2.clientWidth;
  return /*#__PURE__*/React.createElement(_Tooltip, {
    visible: visible && (ref === null || ref === void 0 ? void 0 : (_ref$current4 = ref.current) === null || _ref$current4 === void 0 ? void 0 : _ref$current4.clientWidth) > (parentWidth - betweenSpace) * rowNumber,
    overlayStyle: overlayStyle || {
      maxWidth: 'max-content'
    },
    title: defaultTitle || title
  }, /*#__PURE__*/React.createElement("div", {
    className: "place-text",
    ref: ref
  }, text), /*#__PURE__*/React.createElement("div", {
    className: cls('text', textClassName),
    onMouseEnter: function onMouseEnter() {
      return setVisible(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setVisible(false);
    }
  }, text));
};
export default TooltipText;
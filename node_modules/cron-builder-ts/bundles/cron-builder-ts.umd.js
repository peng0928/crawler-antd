(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('cron-converter')) :
    typeof define === 'function' && define.amd ? define('cron-builder-ts', ['exports', 'cron-converter'], factory) :
    (global = global || self, factory(global['cron-builder-ts'] = {}, global.Cron));
}(this, (function (exports, Cron) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    const __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    const __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var MINUTE = "minute";
    var HOUR = "hour";
    var DAY_OF_THE_MONTH = "dayOfTheMonth";
    var MONTH = "month";
    var DAY_OF_THE_WEEK = "dayOfTheWeek";
    var DEFAULT_INTERVAL = ['*'];
    /**
     * Contains the position-to-name mapping of the cron expression
     * @type {Array}
     * @const
     */
    var MEASURE_OF_TIME_MAP = [
        MINUTE,
        HOUR,
        DAY_OF_THE_MONTH,
        MONTH,
        DAY_OF_THE_WEEK,
    ];

    // https://github.com/microsoft/TypeScript/pull/12253#issuecomment-353494273
    function keys(object) {
        return Object.keys(object);
    }

    var CronValidator = /** @class */ (function () {
        function CronValidator() {
        }
        /**
         * validates a given cron expression (object) for length, then calls validateValue on each value
         * @param {!{
         *  minute: Array.string,
         *  hour: Array.string,
         *  dayOfTheMonth: Array.string,
         *  month: Array.string,
         *  dayOfTheWeek: Array.string,
         * }} expression - rich object containing the state of the cron expression
         * @throws {Error} if expression contains more than 5 keys
         */
        CronValidator.validateExpression = function (expression) {
            // don't care if it's less than 5, we'll just set those to the default '*'
            if (keys(expression).length > MEASURE_OF_TIME_MAP.length) {
                throw new Error("Invalid cron expression; limited to " + MEASURE_OF_TIME_MAP.length + " values.");
            }
            keys(expression).forEach(function (key) {
                expression[key].forEach(function (value) {
                    CronValidator.validateValue(key, value);
                });
            });
        };
        /**
         * validates a given cron expression (string) for length, then calls validateValue on each value
         * @param {!String} expression - an optionally empty string containing at most 5 space delimited expressions.
         * @throws {Error} if the string contains more than 5 space delimited parts.
         */
        CronValidator.validateString = function (expression) {
            var splitExpression = expression.split(' ');
            if (splitExpression.length > MEASURE_OF_TIME_MAP.length) {
                throw new Error("Invalid cron expression; limited to " + MEASURE_OF_TIME_MAP.length + " values.");
            }
            for (var i = 0; i < splitExpression.length; i += 1) {
                CronValidator.validateValue(MEASURE_OF_TIME_MAP[i], splitExpression[i]);
            }
        };
        /**
         * validates any given measureOfTime and corresponding value
         * @param {!String} measureOfTime - as expected
         * @param {!String} value - the cron-ish interval specifier
         * @throws {Error} if measureOfTime is bogus
         * @throws {Error} if value contains an unsupported character
         */
        CronValidator.validateValue = function (measureOfTime, value) {
            var validatorObj = {
                minute: { min: 0, max: 59 },
                hour: { min: 0, max: 23 },
                dayOfTheMonth: { min: 1, max: 31 },
                month: { min: 1, max: 12 },
                dayOfTheWeek: { min: 0, max: 7 }
            };
            var validChars = /^[0-9*-]/;
            if (!validatorObj[measureOfTime]) {
                throw new Error("Invalid measureOfTime; Valid options are: " + MEASURE_OF_TIME_MAP.join(', '));
            }
            if (!validChars.test(value)) {
                throw new Error('Invalid value; Only numbers 0-9, "-", and "*" chars are allowed');
            }
            if (value === '*') {
                return;
            }
            // check to see if value is within range if value is not '*'
            if (value.indexOf('-') >= 0) {
                // value is a range and must be split into high and low
                var rangeArray = value
                    .split('-')
                    .map(function (range) { return parseInt(range, 10); })
                    .filter(function (range) { return isNaN(range) === false; });
                var _a = __read(rangeArray, 2), rangeMin = _a[0], rangeMax = _a[1];
                if (typeof rangeMin !== "number" || rangeMin < validatorObj[measureOfTime].min) {
                    throw new Error("Invalid value; bottom of range is not valid for \\\"" + measureOfTime + "\\\". Limit is " + validatorObj[measureOfTime].min + ".");
                }
                if (typeof rangeMax !== "number" || rangeMax > validatorObj[measureOfTime].max) {
                    throw new Error("Invalid value; top of range is not valid for \\\"" + measureOfTime + "\\\". Limit is " + validatorObj[measureOfTime].max + ".");
                }
            }
            else {
                if (parseInt(value) < validatorObj[measureOfTime].min) {
                    throw new Error("Invalid value; given value is not valid for \\\"" + measureOfTime + "\\\". Minimum value is \\\"" + validatorObj[measureOfTime].min + "\\\".");
                }
                if (parseInt(value) > validatorObj[measureOfTime].max) {
                    throw new Error("Invalid value; given value is not valid for \\\"" + measureOfTime + "\\\". Maximum value is \\\"" + validatorObj[measureOfTime].max + "\\\".");
                }
            }
        };
        return CronValidator;
    }());

    /**
     * Initializes a CronBuilder with an optional initial cron expression.
     * @param {String=} initialExpression - if provided, it must be up to 5 space delimited parts
     * @throws {Error} if the initialExpression is bogus
     * @constructor
     */
    var CronBuilder = /** @class */ (function () {
        function CronBuilder(initialExpression) {
            if (initialExpression === void 0) { initialExpression = "* * * * *"; }
            if (initialExpression) {
                CronValidator.validateString(initialExpression);
                var splitExpression = initialExpression.split(' ');
                this.expression = {
                    minute: splitExpression[0] ? splitExpression[0].split(",") : DEFAULT_INTERVAL,
                    hour: splitExpression[1] ? splitExpression[1].split(",") : DEFAULT_INTERVAL,
                    dayOfTheMonth: splitExpression[2] ? splitExpression[2].split(",") : DEFAULT_INTERVAL,
                    month: splitExpression[3] ? splitExpression[3].split(",") : DEFAULT_INTERVAL,
                    dayOfTheWeek: splitExpression[4] ? splitExpression[4].split(",") : DEFAULT_INTERVAL,
                };
            }
            else {
                this.expression = {
                    minute: DEFAULT_INTERVAL,
                    hour: DEFAULT_INTERVAL,
                    dayOfTheMonth: DEFAULT_INTERVAL,
                    month: DEFAULT_INTERVAL,
                    dayOfTheWeek: DEFAULT_INTERVAL,
                };
            }
        }
        /**
         * builds a working cron expression based on the state of the cron object
         * @param {!Object} [options] - customize how to build cron string
         * @param {!Boolean} [options.plain=true] - get cron string as it is, otherwise build short cron string.
         * if false: * 13 * 1-6 0,1,2,3,5,6 ---> * 13 * 1-6 0-3,5-6
         * @param {!Boolean} [options.outputWeekdayNames=false] - changes the numbers to 3 letter weekday names.
         * if true: *\/5 9-17/2 * 1-3 1-5 ---> *\/5 *(10-16)/2 * JAN-MAR MON-FRI
         * @param {!Boolean} [options.outputMonthNames=false] - changes the numbers to 3 letter month names.
         * if true: *\/5 9-17/2 * 1-3 1-5 ---> *\/5 *(10-16)/2 * JAN-MAR MON-FRI
         * @param {!Boolean} [options.outputHashes=false] - changes the * to H.
         * if true: *\/5 9-17/2 * 1-3 1-5 ---> H/5 H(10-16)/2 H 1-3 1-5
         * @returns {string} - working cron expression
         */
        CronBuilder.prototype.build = function (options) {
            var plain = (options !== null && options !== void 0 ? options : { plain: true }).plain;
            var cronString = [
                this.expression.minute.join(','),
                this.expression.hour.join(','),
                this.expression.dayOfTheMonth.join(','),
                this.expression.month.join(','),
                this.expression.dayOfTheWeek.join(','),
            ].join(' ');
            if (plain) {
                return cronString;
            }
            var cronInstance = new Cron(options);
            cronInstance.fromString(cronString);
            return cronInstance.toString();
        };
        /**
         * adds a value to what exists currently (builds)
         * @param {!String} measureOfTime
         * @param {!String} value
         * @throws {Error} if measureOfTime or value fail validation
         */
        CronBuilder.prototype.addValue = function (measureOfTime, value) {
            CronValidator.validateValue(measureOfTime, value);
            if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {
                this.expression[measureOfTime] = [value];
            }
            else {
                if (this.expression[measureOfTime].indexOf(value) < 0) {
                    this.expression[measureOfTime].push(value);
                }
            }
        };
        ;
        /**
         * removes a single explicit value (subtracts)
         * @param {!String} measureOfTime - as you might guess
         * @param {!String} value - the offensive value
         * @throws {Error} if measureOfTime is bogus.
         */
        CronBuilder.prototype.removeValue = function (measureOfTime, value) {
            if (!this.expression[measureOfTime]) {
                throw new Error("Invalid measureOfTime: Valid options are: " + MEASURE_OF_TIME_MAP.join(', '));
            }
            if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {
                console.log('The value for "' + measureOfTime + '" is already at the default value of "*" - this is a no-op.');
                return;
            }
            this.expression[measureOfTime] = this.expression[measureOfTime].filter(function (timeValue) {
                return value !== timeValue;
            });
            if (!this.expression[measureOfTime].length) {
                this.expression[measureOfTime] = DEFAULT_INTERVAL;
            }
        };
        ;
        CronBuilder.prototype.get = function (measureOfTime, options) {
            if (!this.expression[measureOfTime]) {
                throw new Error("Invalid measureOfTime: Valid options are: " + MEASURE_OF_TIME_MAP.join(', '));
            }
            var expand = (options !== null && options !== void 0 ? options : { expand: false }).expand;
            if (!expand) {
                return this.expression[measureOfTime].join(',');
            }
            var expression = this.getAll({ expand: expand });
            return expression[measureOfTime];
        };
        CronBuilder.prototype.getAll = function (options) {
            var expand = (options !== null && options !== void 0 ? options : { expand: false }).expand;
            if (!expand) {
                return this.expression;
            }
            var cronString = this.build({ plain: true });
            var cronInstance = new Cron();
            cronInstance.fromString(cronString);
            var cronArray = cronInstance.toArray();
            return {
                minute: cronArray[0],
                hour: cronArray[1],
                dayOfTheMonth: cronArray[2],
                month: cronArray[3],
                dayOfTheWeek: cronArray[4],
            };
        };
        /**
         * sets the state of a given measureOfTime
         * @param {!String} measureOfTime - yup
         * @param {!Array.<String>} value - the 5 tuple array of values to set
         * @returns {!String} the comma separated version of the value that you passed in
         * @throws {Error} if your "value" is not an Array&lt;String&gt;
         * @throws {Error} when any item in your value isn't a legal cron-ish descriptor
         */
        CronBuilder.prototype.set = function (measureOfTime, value) {
            var e_1, _a;
            if (!Array.isArray(value)) {
                throw new Error('Invalid value; Value must be in the form of an Array.');
            }
            try {
                for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var item = value_1_1.value;
                    CronValidator.validateValue(measureOfTime, item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.expression[measureOfTime] = value;
            return this.expression[measureOfTime].join(',');
        };
        /**
         * sets the state for the entire cron expression
         * @param {!{
         *  minute: Array.string,
         *  hour: Array.string,
         *  dayOfTheMonth: Array.string,
         *  month: Array.string,
         *  dayOfTheWeek: Array.string,
         * }} expToSet - the entirety of the cron expression.
         * @throws {Error} as usual
         */
        CronBuilder.prototype.setAll = function (expToSet) {
            var _this = this;
            CronValidator.validateExpression(expToSet);
            keys(this.expression).forEach(function (key) { return _this.expression[key] = expToSet[key]; });
        };
        return CronBuilder;
    }());

    exports.CronBuilder = CronBuilder;
    exports.CronValidator = CronValidator;
    exports.DAY_OF_THE_MONTH = DAY_OF_THE_MONTH;
    exports.DAY_OF_THE_WEEK = DAY_OF_THE_WEEK;
    exports.DEFAULT_INTERVAL = DEFAULT_INTERVAL;
    exports.HOUR = HOUR;
    exports.MEASURE_OF_TIME_MAP = MEASURE_OF_TIME_MAP;
    exports.MINUTE = MINUTE;
    exports.MONTH = MONTH;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cron-builder-ts.umd.js.map

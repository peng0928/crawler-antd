{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://cron-builder-ts/lib/types.ts","ng://cron-builder-ts/lib/utils.ts","ng://cron-builder-ts/lib/cron-validator.ts","ng://cron-builder-ts/lib/cron-builder.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","DEFAULT_INTERVAL","MEASURE_OF_TIME_MAP","keys","object","CronValidator","validateExpression","expression","Error","forEach","key","validateValue","validateString","splitExpression","split","measureOfTime","validatorObj","minute","min","max","hour","dayOfTheMonth","month","dayOfTheWeek","join","test","indexOf","_a","map","range","parseInt","filter","isNaN","rangeMin","rangeMax","CronBuilder","initialExpression","this","prototype","build","options","plain","cronString","cronInstance","Cron","fromString","toString","addValue","removeValue","timeValue","console","log","get","expand","getAll","cronArray","toArray","set","Array","isArray","value_1","value_1_1","item","setAll","expToSet","_this"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport const __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nconst __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const MINUTE = \"minute\";\r\nexport const HOUR = \"hour\";\r\nexport const DAY_OF_THE_MONTH = \"dayOfTheMonth\";\r\nexport const MONTH = \"month\";\r\nexport const DAY_OF_THE_WEEK = \"dayOfTheWeek\";\r\n\r\nexport type MeasureOfTime = typeof MINUTE | typeof HOUR | typeof DAY_OF_THE_MONTH | typeof MONTH | typeof DAY_OF_THE_WEEK;\r\n\r\nexport interface Expression {\r\n  [MINUTE]: string[];\r\n  [HOUR]: string[];\r\n  [DAY_OF_THE_MONTH]: string[];\r\n  [MONTH]: string[];\r\n  [DAY_OF_THE_WEEK]: string[];\r\n}\r\n\r\nexport interface ExpandedExpression {\r\n  [MINUTE]: number[];\r\n  [HOUR]: number[];\r\n  [DAY_OF_THE_MONTH]: number[];\r\n  [MONTH]: number[];\r\n  [DAY_OF_THE_WEEK]: number[];\r\n}\r\n\r\nexport const DEFAULT_INTERVAL = ['*'];\r\n\r\n/**\r\n * Contains the position-to-name mapping of the cron expression\r\n * @type {Array}\r\n * @const\r\n */\r\nexport const MEASURE_OF_TIME_MAP: ReadonlyArray<MeasureOfTime> = [\r\n  MINUTE,\r\n  HOUR,\r\n  DAY_OF_THE_MONTH,\r\n  MONTH,\r\n  DAY_OF_THE_WEEK,\r\n];\r\n","// https://github.com/microsoft/TypeScript/pull/12253#issuecomment-353494273\r\nexport function keys<T>(object: T): (keyof T)[] {\r\n  return Object.keys(object) as (keyof T)[];\r\n}\r\n","import { Expression, MEASURE_OF_TIME_MAP } from './types';\r\nimport { keys } from './utils';\r\n\r\nexport class CronValidator {\r\n  /**\r\n   * validates a given cron expression (object) for length, then calls validateValue on each value\r\n   * @param {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }} expression - rich object containing the state of the cron expression\r\n   * @throws {Error} if expression contains more than 5 keys\r\n   */\r\n  public static validateExpression(expression: Expression): void {\r\n    // don't care if it's less than 5, we'll just set those to the default '*'\r\n    if (keys(expression).length > MEASURE_OF_TIME_MAP.length) {\r\n      throw new Error(`Invalid cron expression; limited to ${MEASURE_OF_TIME_MAP.length} values.`);\r\n    }\r\n\r\n    keys(expression).forEach((key) => {\r\n      expression[key].forEach((value) => {\r\n        CronValidator.validateValue(key, value);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * validates a given cron expression (string) for length, then calls validateValue on each value\r\n   * @param {!String} expression - an optionally empty string containing at most 5 space delimited expressions.\r\n   * @throws {Error} if the string contains more than 5 space delimited parts.\r\n   */\r\n  public static validateString(expression: string): void {\r\n    const splitExpression = expression.split(' ');\r\n\r\n    if (splitExpression.length > MEASURE_OF_TIME_MAP.length) {\r\n      throw new Error(`Invalid cron expression; limited to ${MEASURE_OF_TIME_MAP.length} values.`);\r\n    }\r\n\r\n    for (let i = 0; i < splitExpression.length; i += 1) {\r\n      CronValidator.validateValue(MEASURE_OF_TIME_MAP[i], splitExpression[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * validates any given measureOfTime and corresponding value\r\n   * @param {!String} measureOfTime - as expected\r\n   * @param {!String} value - the cron-ish interval specifier\r\n   * @throws {Error} if measureOfTime is bogus\r\n   * @throws {Error} if value contains an unsupported character\r\n   */\r\n  public static validateValue(measureOfTime: keyof Expression, value: string): void {\r\n    const validatorObj = {\r\n      minute: { min: 0, max: 59 },\r\n      hour: { min: 0, max: 23 },\r\n      dayOfTheMonth: { min: 1, max: 31 },\r\n      month: { min: 1, max: 12 },\r\n      dayOfTheWeek: { min: 0, max: 7 }\r\n    };\r\n\r\n    const validChars = /^[0-9*-]/;\r\n\r\n    if (!validatorObj[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime; Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    if (!validChars.test(value)) {\r\n      throw new Error('Invalid value; Only numbers 0-9, \"-\", and \"*\" chars are allowed');\r\n    }\r\n\r\n    if (value === '*') {\r\n      return;\r\n    }\r\n\r\n    // check to see if value is within range if value is not '*'\r\n    if (value.indexOf('-') >= 0) {\r\n      // value is a range and must be split into high and low\r\n      const rangeArray: ReadonlyArray<number | undefined> = value\r\n        .split('-')\r\n        .map((range) => parseInt(range, 10))\r\n        .filter((range) => isNaN(range) === false);\r\n\r\n      const [rangeMin, rangeMax] = rangeArray;\r\n\r\n      if (typeof rangeMin !== \"number\" || rangeMin < validatorObj[measureOfTime].min) {\r\n        throw new Error(`Invalid value; bottom of range is not valid for \\\\\"${measureOfTime}\\\\\". Limit is ${validatorObj[measureOfTime].min}.`);\r\n      }\r\n\r\n      if (typeof rangeMax !== \"number\" || rangeMax > validatorObj[measureOfTime].max) {\r\n        throw new Error(`Invalid value; top of range is not valid for \\\\\"${measureOfTime}\\\\\". Limit is ${validatorObj[measureOfTime].max}.`);\r\n      }\r\n    } else {\r\n      if (parseInt(value) < validatorObj[measureOfTime].min) {\r\n        throw new Error(`Invalid value; given value is not valid for \\\\\"${measureOfTime}\\\\\". Minimum value is \\\\\"${validatorObj[measureOfTime].min}\\\\\".`);\r\n      }\r\n\r\n      if (parseInt(value) > validatorObj[measureOfTime].max) {\r\n        throw new Error(`Invalid value; given value is not valid for \\\\\"${measureOfTime}\\\\\". Maximum value is \\\\\"${validatorObj[measureOfTime].max}\\\\\".`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as Cron from \"cron-converter\";\r\n\r\nimport { CronValidator } from './cron-validator';\r\nimport { DEFAULT_INTERVAL, ExpandedExpression, Expression, MEASURE_OF_TIME_MAP } from './types';\r\nimport { keys } from './utils';\r\n\r\n/**\r\n * Initializes a CronBuilder with an optional initial cron expression.\r\n * @param {String=} initialExpression - if provided, it must be up to 5 space delimited parts\r\n * @throws {Error} if the initialExpression is bogus\r\n * @constructor\r\n */\r\nexport class CronBuilder {\r\n  private readonly expression: Expression;\r\n\r\n  constructor(initialExpression: string = \"* * * * *\") {\r\n    if (initialExpression) {\r\n      CronValidator.validateString(initialExpression);\r\n\r\n      const splitExpression = initialExpression.split(' ');\r\n\r\n      this.expression = {\r\n        minute: splitExpression[0] ? splitExpression[0].split(\",\") : DEFAULT_INTERVAL,\r\n        hour: splitExpression[1] ? splitExpression[1].split(\",\") : DEFAULT_INTERVAL,\r\n        dayOfTheMonth: splitExpression[2] ? splitExpression[2].split(\",\") : DEFAULT_INTERVAL,\r\n        month: splitExpression[3] ? splitExpression[3].split(\",\") : DEFAULT_INTERVAL,\r\n        dayOfTheWeek: splitExpression[4] ? splitExpression[4].split(\",\") : DEFAULT_INTERVAL,\r\n      };\r\n    } else {\r\n      this.expression = {\r\n        minute: DEFAULT_INTERVAL,\r\n        hour: DEFAULT_INTERVAL,\r\n        dayOfTheMonth: DEFAULT_INTERVAL,\r\n        month: DEFAULT_INTERVAL,\r\n        dayOfTheWeek: DEFAULT_INTERVAL,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * builds a working cron expression based on the state of the cron object\r\n   * @param {!Object} [options] - customize how to build cron string\r\n   * @param {!Boolean} [options.plain=true] - get cron string as it is, otherwise build short cron string.\r\n   * if false: * 13 * 1-6 0,1,2,3,5,6 ---> * 13 * 1-6 0-3,5-6\r\n   * @param {!Boolean} [options.outputWeekdayNames=false] - changes the numbers to 3 letter weekday names.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> *\\/5 *(10-16)/2 * JAN-MAR MON-FRI\r\n   * @param {!Boolean} [options.outputMonthNames=false] - changes the numbers to 3 letter month names.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> *\\/5 *(10-16)/2 * JAN-MAR MON-FRI\r\n   * @param {!Boolean} [options.outputHashes=false] - changes the * to H.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> H/5 H(10-16)/2 H 1-3 1-5\r\n   * @returns {string} - working cron expression\r\n   */\r\n  public build(options?: { plain: boolean | undefined } & Omit<Cron.Options, \"timezone\">): string {\r\n    const {\r\n      plain,\r\n    } = options ?? { plain: true };\r\n\r\n    const cronString = [\r\n      this.expression.minute.join(','),\r\n      this.expression.hour.join(','),\r\n      this.expression.dayOfTheMonth.join(','),\r\n      this.expression.month.join(','),\r\n      this.expression.dayOfTheWeek.join(','),\r\n    ].join(' ');\r\n\r\n    if (plain) {\r\n      return cronString;\r\n    }\r\n\r\n    const cronInstance = new Cron(options);\r\n    cronInstance.fromString(cronString);\r\n\r\n    return cronInstance.toString();\r\n  }\r\n\r\n\r\n  /**\r\n   * adds a value to what exists currently (builds)\r\n   * @param {!String} measureOfTime\r\n   * @param {!String} value\r\n   * @throws {Error} if measureOfTime or value fail validation\r\n   */\r\n  public addValue(measureOfTime: keyof Expression, value: string): void {\r\n    CronValidator.validateValue(measureOfTime, value);\r\n\r\n    if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {\r\n      this.expression[measureOfTime] = [value];\r\n    } else {\r\n      if (this.expression[measureOfTime].indexOf(value) < 0) {\r\n        this.expression[measureOfTime].push(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * removes a single explicit value (subtracts)\r\n   * @param {!String} measureOfTime - as you might guess\r\n   * @param {!String} value - the offensive value\r\n   * @throws {Error} if measureOfTime is bogus.\r\n   */\r\n  public removeValue(measureOfTime: keyof Expression, value: string): void {\r\n    if (!this.expression[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime: Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {\r\n      console.log('The value for \"' + measureOfTime + '\" is already at the default value of \"*\" - this is a no-op.');\r\n\r\n      return;\r\n    }\r\n\r\n    this.expression[measureOfTime] = this.expression[measureOfTime].filter((timeValue) => {\r\n      return value !== timeValue;\r\n    });\r\n\r\n    if (!this.expression[measureOfTime].length) {\r\n      this.expression[measureOfTime] = DEFAULT_INTERVAL;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * returns the current state of a given measureOfTime\r\n   * @param {!String} measureOfTime one of \"minute\", \"hour\", etc\r\n   * @returns {!Array.number} comma separated blah blah\r\n   * @throws {Error} if the measureOfTime is not one of the permitted values.\r\n   */\r\n  public get(measureOfTime: keyof Expression, options: { expand: true }): number[]\r\n  /**\r\n   * returns the current state of a given measureOfTime\r\n   * @param {!String} measureOfTime one of \"minute\", \"hour\", etc\r\n   * @returns {!String} comma separated blah blah\r\n   * @throws {Error} if the measureOfTime is not one of the permitted values.\r\n   */\r\n  public get(measureOfTime: keyof Expression, options?: { expand: false }): string\r\n  public get(measureOfTime: keyof Expression, options?: { expand: boolean }): string | number[] {\r\n    if (!this.expression[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime: Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    const {\r\n      expand,\r\n    } = options ?? { expand: false };\r\n\r\n    if (!expand) {\r\n      return this.expression[measureOfTime].join(',');\r\n    }\r\n\r\n    const expression = this.getAll({ expand });\r\n\r\n    return expression[measureOfTime];\r\n  }\r\n\r\n  /**\r\n   * Returns a rich object that describes the current state of the cron expression.\r\n   * @returns {!{\r\n   *  minute: Array.number,\r\n   *  hour: Array.number,\r\n   *  dayOfTheMonth: Array.number,\r\n   *  month: Array.number,\r\n   *  dayOfTheWeek: Array.number,\r\n   * }}\r\n   */\r\n  public getAll(options: { expand: true }): ExpandedExpression\r\n  /**\r\n   * Returns a rich object that describes the current state of the cron expression.\r\n   * @returns {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }}\r\n   */\r\n  public getAll(options?: { expand: false }): Expression\r\n  public getAll(options?: { expand: boolean }): Expression | ExpandedExpression {\r\n    const {\r\n      expand,\r\n    } = options ?? { expand: false };\r\n\r\n    if (!expand) {\r\n      return this.expression;\r\n    }\r\n\r\n    const cronString = this.build({ plain: true });\r\n    const cronInstance = new Cron();\r\n    cronInstance.fromString(cronString);\r\n    const cronArray = cronInstance.toArray();\r\n\r\n    return {\r\n      minute: cronArray[0],\r\n      hour: cronArray[1],\r\n      dayOfTheMonth: cronArray[2],\r\n      month: cronArray[3],\r\n      dayOfTheWeek: cronArray[4],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sets the state of a given measureOfTime\r\n   * @param {!String} measureOfTime - yup\r\n   * @param {!Array.<String>} value - the 5 tuple array of values to set\r\n   * @returns {!String} the comma separated version of the value that you passed in\r\n   * @throws {Error} if your \"value\" is not an Array&lt;String&gt;\r\n   * @throws {Error} when any item in your value isn't a legal cron-ish descriptor\r\n   */\r\n  public set(measureOfTime: keyof Expression, value: string[]): string {\r\n    if (!Array.isArray(value)) {\r\n      throw new Error('Invalid value; Value must be in the form of an Array.');\r\n    }\r\n\r\n    for (const item of value) {\r\n      CronValidator.validateValue(measureOfTime, item);\r\n    }\r\n\r\n    this.expression[measureOfTime] = value;\r\n\r\n    return this.expression[measureOfTime].join(',');\r\n  }\r\n\r\n  /**\r\n   * sets the state for the entire cron expression\r\n   * @param {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }} expToSet - the entirety of the cron expression.\r\n   * @throws {Error} as usual\r\n   */\r\n  public setAll(expToSet: Expression): void {\r\n    CronValidator.validateExpression(expToSet);\r\n\r\n    keys(this.expression).forEach((key) => this.expression[key] = expToSet[key])\r\n  }\r\n}\r\n"]}
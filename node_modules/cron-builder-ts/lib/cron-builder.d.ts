import * as Cron from "cron-converter";
import { ExpandedExpression, Expression } from './types';
/**
 * Initializes a CronBuilder with an optional initial cron expression.
 * @param {String=} initialExpression - if provided, it must be up to 5 space delimited parts
 * @throws {Error} if the initialExpression is bogus
 * @constructor
 */
export declare class CronBuilder {
    private readonly expression;
    constructor(initialExpression?: string);
    /**
     * builds a working cron expression based on the state of the cron object
     * @param {!Object} [options] - customize how to build cron string
     * @param {!Boolean} [options.plain=true] - get cron string as it is, otherwise build short cron string.
     * if false: * 13 * 1-6 0,1,2,3,5,6 ---> * 13 * 1-6 0-3,5-6
     * @param {!Boolean} [options.outputWeekdayNames=false] - changes the numbers to 3 letter weekday names.
     * if true: *\/5 9-17/2 * 1-3 1-5 ---> *\/5 *(10-16)/2 * JAN-MAR MON-FRI
     * @param {!Boolean} [options.outputMonthNames=false] - changes the numbers to 3 letter month names.
     * if true: *\/5 9-17/2 * 1-3 1-5 ---> *\/5 *(10-16)/2 * JAN-MAR MON-FRI
     * @param {!Boolean} [options.outputHashes=false] - changes the * to H.
     * if true: *\/5 9-17/2 * 1-3 1-5 ---> H/5 H(10-16)/2 H 1-3 1-5
     * @returns {string} - working cron expression
     */
    build(options?: {
        plain: boolean | undefined;
    } & Omit<Cron.Options, "timezone">): string;
    /**
     * adds a value to what exists currently (builds)
     * @param {!String} measureOfTime
     * @param {!String} value
     * @throws {Error} if measureOfTime or value fail validation
     */
    addValue(measureOfTime: keyof Expression, value: string): void;
    /**
     * removes a single explicit value (subtracts)
     * @param {!String} measureOfTime - as you might guess
     * @param {!String} value - the offensive value
     * @throws {Error} if measureOfTime is bogus.
     */
    removeValue(measureOfTime: keyof Expression, value: string): void;
    /**
     * returns the current state of a given measureOfTime
     * @param {!String} measureOfTime one of "minute", "hour", etc
     * @returns {!Array.number} comma separated blah blah
     * @throws {Error} if the measureOfTime is not one of the permitted values.
     */
    get(measureOfTime: keyof Expression, options: {
        expand: true;
    }): number[];
    /**
     * returns the current state of a given measureOfTime
     * @param {!String} measureOfTime one of "minute", "hour", etc
     * @returns {!String} comma separated blah blah
     * @throws {Error} if the measureOfTime is not one of the permitted values.
     */
    get(measureOfTime: keyof Expression, options?: {
        expand: false;
    }): string;
    /**
     * Returns a rich object that describes the current state of the cron expression.
     * @returns {!{
     *  minute: Array.number,
     *  hour: Array.number,
     *  dayOfTheMonth: Array.number,
     *  month: Array.number,
     *  dayOfTheWeek: Array.number,
     * }}
     */
    getAll(options: {
        expand: true;
    }): ExpandedExpression;
    /**
     * Returns a rich object that describes the current state of the cron expression.
     * @returns {!{
     *  minute: Array.string,
     *  hour: Array.string,
     *  dayOfTheMonth: Array.string,
     *  month: Array.string,
     *  dayOfTheWeek: Array.string,
     * }}
     */
    getAll(options?: {
        expand: false;
    }): Expression;
    /**
     * sets the state of a given measureOfTime
     * @param {!String} measureOfTime - yup
     * @param {!Array.<String>} value - the 5 tuple array of values to set
     * @returns {!String} the comma separated version of the value that you passed in
     * @throws {Error} if your "value" is not an Array&lt;String&gt;
     * @throws {Error} when any item in your value isn't a legal cron-ish descriptor
     */
    set(measureOfTime: keyof Expression, value: string[]): string;
    /**
     * sets the state for the entire cron expression
     * @param {!{
     *  minute: Array.string,
     *  hour: Array.string,
     *  dayOfTheMonth: Array.string,
     *  month: Array.string,
     *  dayOfTheWeek: Array.string,
     * }} expToSet - the entirety of the cron expression.
     * @throws {Error} as usual
     */
    setAll(expToSet: Expression): void;
}

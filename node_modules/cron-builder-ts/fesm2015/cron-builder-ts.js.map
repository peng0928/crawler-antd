{"version":3,"file":"cron-builder-ts.js","sources":["ng://cron-builder-ts/lib/types.ts","ng://cron-builder-ts/lib/utils.ts","ng://cron-builder-ts/lib/cron-validator.ts","ng://cron-builder-ts/lib/cron-builder.ts","ng://cron-builder-ts/public-api.ts","ng://cron-builder-ts/cron-builder-ts.ts"],"sourcesContent":["export const MINUTE = \"minute\";\r\nexport const HOUR = \"hour\";\r\nexport const DAY_OF_THE_MONTH = \"dayOfTheMonth\";\r\nexport const MONTH = \"month\";\r\nexport const DAY_OF_THE_WEEK = \"dayOfTheWeek\";\r\n\r\nexport type MeasureOfTime = typeof MINUTE | typeof HOUR | typeof DAY_OF_THE_MONTH | typeof MONTH | typeof DAY_OF_THE_WEEK;\r\n\r\nexport interface Expression {\r\n  [MINUTE]: string[];\r\n  [HOUR]: string[];\r\n  [DAY_OF_THE_MONTH]: string[];\r\n  [MONTH]: string[];\r\n  [DAY_OF_THE_WEEK]: string[];\r\n}\r\n\r\nexport interface ExpandedExpression {\r\n  [MINUTE]: number[];\r\n  [HOUR]: number[];\r\n  [DAY_OF_THE_MONTH]: number[];\r\n  [MONTH]: number[];\r\n  [DAY_OF_THE_WEEK]: number[];\r\n}\r\n\r\nexport const DEFAULT_INTERVAL = ['*'];\r\n\r\n/**\r\n * Contains the position-to-name mapping of the cron expression\r\n * @type {Array}\r\n * @const\r\n */\r\nexport const MEASURE_OF_TIME_MAP: ReadonlyArray<MeasureOfTime> = [\r\n  MINUTE,\r\n  HOUR,\r\n  DAY_OF_THE_MONTH,\r\n  MONTH,\r\n  DAY_OF_THE_WEEK,\r\n];\r\n","// https://github.com/microsoft/TypeScript/pull/12253#issuecomment-353494273\r\nexport function keys<T>(object: T): (keyof T)[] {\r\n  return Object.keys(object) as (keyof T)[];\r\n}\r\n","import { Expression, MEASURE_OF_TIME_MAP } from './types';\r\nimport { keys } from './utils';\r\n\r\nexport class CronValidator {\r\n  /**\r\n   * validates a given cron expression (object) for length, then calls validateValue on each value\r\n   * @param {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }} expression - rich object containing the state of the cron expression\r\n   * @throws {Error} if expression contains more than 5 keys\r\n   */\r\n  public static validateExpression(expression: Expression): void {\r\n    // don't care if it's less than 5, we'll just set those to the default '*'\r\n    if (keys(expression).length > MEASURE_OF_TIME_MAP.length) {\r\n      throw new Error(`Invalid cron expression; limited to ${MEASURE_OF_TIME_MAP.length} values.`);\r\n    }\r\n\r\n    keys(expression).forEach((key) => {\r\n      expression[key].forEach((value) => {\r\n        CronValidator.validateValue(key, value);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * validates a given cron expression (string) for length, then calls validateValue on each value\r\n   * @param {!String} expression - an optionally empty string containing at most 5 space delimited expressions.\r\n   * @throws {Error} if the string contains more than 5 space delimited parts.\r\n   */\r\n  public static validateString(expression: string): void {\r\n    const splitExpression = expression.split(' ');\r\n\r\n    if (splitExpression.length > MEASURE_OF_TIME_MAP.length) {\r\n      throw new Error(`Invalid cron expression; limited to ${MEASURE_OF_TIME_MAP.length} values.`);\r\n    }\r\n\r\n    for (let i = 0; i < splitExpression.length; i += 1) {\r\n      CronValidator.validateValue(MEASURE_OF_TIME_MAP[i], splitExpression[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * validates any given measureOfTime and corresponding value\r\n   * @param {!String} measureOfTime - as expected\r\n   * @param {!String} value - the cron-ish interval specifier\r\n   * @throws {Error} if measureOfTime is bogus\r\n   * @throws {Error} if value contains an unsupported character\r\n   */\r\n  public static validateValue(measureOfTime: keyof Expression, value: string): void {\r\n    const validatorObj = {\r\n      minute: { min: 0, max: 59 },\r\n      hour: { min: 0, max: 23 },\r\n      dayOfTheMonth: { min: 1, max: 31 },\r\n      month: { min: 1, max: 12 },\r\n      dayOfTheWeek: { min: 0, max: 7 }\r\n    };\r\n\r\n    const validChars = /^[0-9*-]/;\r\n\r\n    if (!validatorObj[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime; Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    if (!validChars.test(value)) {\r\n      throw new Error('Invalid value; Only numbers 0-9, \"-\", and \"*\" chars are allowed');\r\n    }\r\n\r\n    if (value === '*') {\r\n      return;\r\n    }\r\n\r\n    // check to see if value is within range if value is not '*'\r\n    if (value.indexOf('-') >= 0) {\r\n      // value is a range and must be split into high and low\r\n      const rangeArray: ReadonlyArray<number | undefined> = value\r\n        .split('-')\r\n        .map((range) => parseInt(range, 10))\r\n        .filter((range) => isNaN(range) === false);\r\n\r\n      const [rangeMin, rangeMax] = rangeArray;\r\n\r\n      if (typeof rangeMin !== \"number\" || rangeMin < validatorObj[measureOfTime].min) {\r\n        throw new Error(`Invalid value; bottom of range is not valid for \\\\\"${measureOfTime}\\\\\". Limit is ${validatorObj[measureOfTime].min}.`);\r\n      }\r\n\r\n      if (typeof rangeMax !== \"number\" || rangeMax > validatorObj[measureOfTime].max) {\r\n        throw new Error(`Invalid value; top of range is not valid for \\\\\"${measureOfTime}\\\\\". Limit is ${validatorObj[measureOfTime].max}.`);\r\n      }\r\n    } else {\r\n      if (parseInt(value) < validatorObj[measureOfTime].min) {\r\n        throw new Error(`Invalid value; given value is not valid for \\\\\"${measureOfTime}\\\\\". Minimum value is \\\\\"${validatorObj[measureOfTime].min}\\\\\".`);\r\n      }\r\n\r\n      if (parseInt(value) > validatorObj[measureOfTime].max) {\r\n        throw new Error(`Invalid value; given value is not valid for \\\\\"${measureOfTime}\\\\\". Maximum value is \\\\\"${validatorObj[measureOfTime].max}\\\\\".`);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as Cron from \"cron-converter\";\r\n\r\nimport { CronValidator } from './cron-validator';\r\nimport { DEFAULT_INTERVAL, ExpandedExpression, Expression, MEASURE_OF_TIME_MAP } from './types';\r\nimport { keys } from './utils';\r\n\r\n/**\r\n * Initializes a CronBuilder with an optional initial cron expression.\r\n * @param {String=} initialExpression - if provided, it must be up to 5 space delimited parts\r\n * @throws {Error} if the initialExpression is bogus\r\n * @constructor\r\n */\r\nexport class CronBuilder {\r\n  private readonly expression: Expression;\r\n\r\n  constructor(initialExpression: string = \"* * * * *\") {\r\n    if (initialExpression) {\r\n      CronValidator.validateString(initialExpression);\r\n\r\n      const splitExpression = initialExpression.split(' ');\r\n\r\n      this.expression = {\r\n        minute: splitExpression[0] ? splitExpression[0].split(\",\") : DEFAULT_INTERVAL,\r\n        hour: splitExpression[1] ? splitExpression[1].split(\",\") : DEFAULT_INTERVAL,\r\n        dayOfTheMonth: splitExpression[2] ? splitExpression[2].split(\",\") : DEFAULT_INTERVAL,\r\n        month: splitExpression[3] ? splitExpression[3].split(\",\") : DEFAULT_INTERVAL,\r\n        dayOfTheWeek: splitExpression[4] ? splitExpression[4].split(\",\") : DEFAULT_INTERVAL,\r\n      };\r\n    } else {\r\n      this.expression = {\r\n        minute: DEFAULT_INTERVAL,\r\n        hour: DEFAULT_INTERVAL,\r\n        dayOfTheMonth: DEFAULT_INTERVAL,\r\n        month: DEFAULT_INTERVAL,\r\n        dayOfTheWeek: DEFAULT_INTERVAL,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * builds a working cron expression based on the state of the cron object\r\n   * @param {!Object} [options] - customize how to build cron string\r\n   * @param {!Boolean} [options.plain=true] - get cron string as it is, otherwise build short cron string.\r\n   * if false: * 13 * 1-6 0,1,2,3,5,6 ---> * 13 * 1-6 0-3,5-6\r\n   * @param {!Boolean} [options.outputWeekdayNames=false] - changes the numbers to 3 letter weekday names.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> *\\/5 *(10-16)/2 * JAN-MAR MON-FRI\r\n   * @param {!Boolean} [options.outputMonthNames=false] - changes the numbers to 3 letter month names.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> *\\/5 *(10-16)/2 * JAN-MAR MON-FRI\r\n   * @param {!Boolean} [options.outputHashes=false] - changes the * to H.\r\n   * if true: *\\/5 9-17/2 * 1-3 1-5 ---> H/5 H(10-16)/2 H 1-3 1-5\r\n   * @returns {string} - working cron expression\r\n   */\r\n  public build(options?: { plain: boolean | undefined } & Omit<Cron.Options, \"timezone\">): string {\r\n    const {\r\n      plain,\r\n    } = options ?? { plain: true };\r\n\r\n    const cronString = [\r\n      this.expression.minute.join(','),\r\n      this.expression.hour.join(','),\r\n      this.expression.dayOfTheMonth.join(','),\r\n      this.expression.month.join(','),\r\n      this.expression.dayOfTheWeek.join(','),\r\n    ].join(' ');\r\n\r\n    if (plain) {\r\n      return cronString;\r\n    }\r\n\r\n    const cronInstance = new Cron(options);\r\n    cronInstance.fromString(cronString);\r\n\r\n    return cronInstance.toString();\r\n  }\r\n\r\n\r\n  /**\r\n   * adds a value to what exists currently (builds)\r\n   * @param {!String} measureOfTime\r\n   * @param {!String} value\r\n   * @throws {Error} if measureOfTime or value fail validation\r\n   */\r\n  public addValue(measureOfTime: keyof Expression, value: string): void {\r\n    CronValidator.validateValue(measureOfTime, value);\r\n\r\n    if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {\r\n      this.expression[measureOfTime] = [value];\r\n    } else {\r\n      if (this.expression[measureOfTime].indexOf(value) < 0) {\r\n        this.expression[measureOfTime].push(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * removes a single explicit value (subtracts)\r\n   * @param {!String} measureOfTime - as you might guess\r\n   * @param {!String} value - the offensive value\r\n   * @throws {Error} if measureOfTime is bogus.\r\n   */\r\n  public removeValue(measureOfTime: keyof Expression, value: string): void {\r\n    if (!this.expression[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime: Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    if (this.expression[measureOfTime].length === 1 && this.expression[measureOfTime][0] === '*') {\r\n      console.log('The value for \"' + measureOfTime + '\" is already at the default value of \"*\" - this is a no-op.');\r\n\r\n      return;\r\n    }\r\n\r\n    this.expression[measureOfTime] = this.expression[measureOfTime].filter((timeValue) => {\r\n      return value !== timeValue;\r\n    });\r\n\r\n    if (!this.expression[measureOfTime].length) {\r\n      this.expression[measureOfTime] = DEFAULT_INTERVAL;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * returns the current state of a given measureOfTime\r\n   * @param {!String} measureOfTime one of \"minute\", \"hour\", etc\r\n   * @returns {!Array.number} comma separated blah blah\r\n   * @throws {Error} if the measureOfTime is not one of the permitted values.\r\n   */\r\n  public get(measureOfTime: keyof Expression, options: { expand: true }): number[]\r\n  /**\r\n   * returns the current state of a given measureOfTime\r\n   * @param {!String} measureOfTime one of \"minute\", \"hour\", etc\r\n   * @returns {!String} comma separated blah blah\r\n   * @throws {Error} if the measureOfTime is not one of the permitted values.\r\n   */\r\n  public get(measureOfTime: keyof Expression, options?: { expand: false }): string\r\n  public get(measureOfTime: keyof Expression, options?: { expand: boolean }): string | number[] {\r\n    if (!this.expression[measureOfTime]) {\r\n      throw new Error(`Invalid measureOfTime: Valid options are: ${MEASURE_OF_TIME_MAP.join(', ')}`);\r\n    }\r\n\r\n    const {\r\n      expand,\r\n    } = options ?? { expand: false };\r\n\r\n    if (!expand) {\r\n      return this.expression[measureOfTime].join(',');\r\n    }\r\n\r\n    const expression = this.getAll({ expand });\r\n\r\n    return expression[measureOfTime];\r\n  }\r\n\r\n  /**\r\n   * Returns a rich object that describes the current state of the cron expression.\r\n   * @returns {!{\r\n   *  minute: Array.number,\r\n   *  hour: Array.number,\r\n   *  dayOfTheMonth: Array.number,\r\n   *  month: Array.number,\r\n   *  dayOfTheWeek: Array.number,\r\n   * }}\r\n   */\r\n  public getAll(options: { expand: true }): ExpandedExpression\r\n  /**\r\n   * Returns a rich object that describes the current state of the cron expression.\r\n   * @returns {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }}\r\n   */\r\n  public getAll(options?: { expand: false }): Expression\r\n  public getAll(options?: { expand: boolean }): Expression | ExpandedExpression {\r\n    const {\r\n      expand,\r\n    } = options ?? { expand: false };\r\n\r\n    if (!expand) {\r\n      return this.expression;\r\n    }\r\n\r\n    const cronString = this.build({ plain: true });\r\n    const cronInstance = new Cron();\r\n    cronInstance.fromString(cronString);\r\n    const cronArray = cronInstance.toArray();\r\n\r\n    return {\r\n      minute: cronArray[0],\r\n      hour: cronArray[1],\r\n      dayOfTheMonth: cronArray[2],\r\n      month: cronArray[3],\r\n      dayOfTheWeek: cronArray[4],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sets the state of a given measureOfTime\r\n   * @param {!String} measureOfTime - yup\r\n   * @param {!Array.<String>} value - the 5 tuple array of values to set\r\n   * @returns {!String} the comma separated version of the value that you passed in\r\n   * @throws {Error} if your \"value\" is not an Array&lt;String&gt;\r\n   * @throws {Error} when any item in your value isn't a legal cron-ish descriptor\r\n   */\r\n  public set(measureOfTime: keyof Expression, value: string[]): string {\r\n    if (!Array.isArray(value)) {\r\n      throw new Error('Invalid value; Value must be in the form of an Array.');\r\n    }\r\n\r\n    for (const item of value) {\r\n      CronValidator.validateValue(measureOfTime, item);\r\n    }\r\n\r\n    this.expression[measureOfTime] = value;\r\n\r\n    return this.expression[measureOfTime].join(',');\r\n  }\r\n\r\n  /**\r\n   * sets the state for the entire cron expression\r\n   * @param {!{\r\n   *  minute: Array.string,\r\n   *  hour: Array.string,\r\n   *  dayOfTheMonth: Array.string,\r\n   *  month: Array.string,\r\n   *  dayOfTheWeek: Array.string,\r\n   * }} expToSet - the entirety of the cron expression.\r\n   * @throws {Error} as usual\r\n   */\r\n  public setAll(expToSet: Expression): void {\r\n    CronValidator.validateExpression(expToSet);\r\n\r\n    keys(this.expression).forEach((key) => this.expression[key] = expToSet[key])\r\n  }\r\n}\r\n","/*\n * Public API Surface of cron-builder-ts\n */\n\nexport * from './lib/cron-builder';\nexport * from \"./lib/cron-validator\";\nexport * from './lib/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;MAAa,MAAM,GAAG,SAAS;MAClB,IAAI,GAAG,OAAO;MACd,gBAAgB,GAAG,gBAAgB;MACnC,KAAK,GAAG,QAAQ;MAChB,eAAe,GAAG,eAAe;MAoBjC,gBAAgB,GAAG,CAAC,GAAG,EAAE;AAEtC;;;;;MAKa,mBAAmB,GAAiC;IAC/D,MAAM;IACN,IAAI;IACJ,gBAAgB;IAChB,KAAK;IACL,eAAe;;;ACpCjB;SACgB,IAAI,CAAI,MAAS;IAC/B,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAgB,CAAC;AAC5C;;MCAa,aAAa;;;;;;;;;;;;IAYjB,OAAO,kBAAkB,CAAC,UAAsB;;QAErD,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,EAAE;YACxD,MAAM,IAAI,KAAK,CAAC,uCAAuC,mBAAmB,CAAC,MAAM,UAAU,CAAC,CAAC;SAC9F;QAED,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;YAC3B,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK;gBAC5B,aAAa,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACzC,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;;;;;IAOM,OAAO,cAAc,CAAC,UAAkB;QAC7C,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE9C,IAAI,eAAe,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,uCAAuC,mBAAmB,CAAC,MAAM,UAAU,CAAC,CAAC;SAC9F;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAClD,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;SACzE;KACF;;;;;;;;IASM,OAAO,aAAa,CAAC,aAA+B,EAAE,KAAa;QACxE,MAAM,YAAY,GAAG;YACnB,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YAC3B,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YACzB,aAAa,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YAClC,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;YAC1B,YAAY,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;SACjC,CAAC;QAEF,MAAM,UAAU,GAAG,UAAU,CAAC;QAE9B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,6CAA6C,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChG;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;SACpF;QAED,IAAI,KAAK,KAAK,GAAG,EAAE;YACjB,OAAO;SACR;;QAGD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;YAE3B,MAAM,UAAU,GAAsC,KAAK;iBACxD,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;iBACnC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;YAE7C,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,UAAU,CAAC;YAExC,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;gBAC9E,MAAM,IAAI,KAAK,CAAC,sDAAsD,aAAa,iBAAiB,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;aACzI;YAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;gBAC9E,MAAM,IAAI,KAAK,CAAC,mDAAmD,aAAa,iBAAiB,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;aACtI;SACF;aAAM;YACL,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,kDAAkD,aAAa,4BAA4B,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;aACnJ;YAED,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,kDAAkD,aAAa,4BAA4B,YAAY,CAAC,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;aACnJ;SACF;KACF;;;AC/FH;;;;;;MAMa,WAAW;IAGtB,YAAY,oBAA4B,WAAW;QACjD,IAAI,iBAAiB,EAAE;YACrB,aAAa,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,eAAe,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAErD,IAAI,CAAC,UAAU,GAAG;gBAChB,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB;gBAC7E,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB;gBAC3E,aAAa,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB;gBACpF,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB;gBAC5E,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,gBAAgB;aACpF,CAAC;SACH;aAAM;YACL,IAAI,CAAC,UAAU,GAAG;gBAChB,MAAM,EAAE,gBAAgB;gBACxB,IAAI,EAAE,gBAAgB;gBACtB,aAAa,EAAE,gBAAgB;gBAC/B,KAAK,EAAE,gBAAgB;gBACvB,YAAY,EAAE,gBAAgB;aAC/B,CAAC;SACH;KACF;;;;;;;;;;;;;;IAeM,KAAK,CAAC,OAAyE;QACpF,MAAM,EACJ,KAAK,GACN,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;QAE/B,MAAM,UAAU,GAAG;YACjB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YAC9B,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;YACvC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC;SACvC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEZ,IAAI,KAAK,EAAE;YACT,OAAO,UAAU,CAAC;SACnB;QAED,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;QACvC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAEpC,OAAO,YAAY,CAAC,QAAQ,EAAE,CAAC;KAChC;;;;;;;IASM,QAAQ,CAAC,aAA+B,EAAE,KAAa;QAC5D,aAAa,CAAC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC5F,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACrD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC5C;SACF;KACF;;;;;;;;IAQM,WAAW,CAAC,aAA+B,EAAE,KAAa;QAC/D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,6CAA6C,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChG;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC5F,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,aAAa,GAAG,6DAA6D,CAAC,CAAC;YAE/G,OAAO;SACR;QAED,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS;YAC/E,OAAO,KAAK,KAAK,SAAS,CAAC;SAC5B,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,EAAE;YAC1C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,gBAAgB,CAAC;SACnD;KACF;;IAgBM,GAAG,CAAC,aAA+B,EAAE,OAA6B;QACvE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,6CAA6C,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChG;QAED,MAAM,EACJ,MAAM,GACP,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;QAEjC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACjD;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE3C,OAAO,UAAU,CAAC,aAAa,CAAC,CAAC;KAClC;IAwBM,MAAM,CAAC,OAA6B;QACzC,MAAM,EACJ,MAAM,GACP,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;QAEjC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACpC,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,EAAE,CAAC;QAEzC,OAAO;YACL,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;YAClB,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;YAC3B,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;YACnB,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;SAC3B,CAAA;KACF;;;;;;;;;IAUM,GAAG,CAAC,aAA+B,EAAE,KAAe;QACzD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;SAC1E;QAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,aAAa,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;QAEvC,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACjD;;;;;;;;;;;;IAaM,MAAM,CAAC,QAAoB;QAChC,aAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAA;KAC7E;;;AC1OH;;;;ACAA;;;;;;"}